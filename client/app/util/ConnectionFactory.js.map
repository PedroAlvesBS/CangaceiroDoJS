{"version":3,"sources":["../../app-src/util/ConnectionFactory.js"],"names":["stores","connection","close","ConnectionFactory","constructor","Error","getConnection","Promise","resolve","reject","openRequest","indexedDB","open","onupgradeneeded","e","_createStores","target","result","onsuccess","bind","onerror","console","log","error","name","forEach","store","objectStoreNames","contains","deleteObjectStore","createObjectStore","autoIncrement","closeConnection"],"mappings":";;;;;;AAAA,kBAAMA,SAAS,CAAC,aAAD,CAAf;AACA,gBAAIC,aAAa,IAAjB;AACA,gBAAIC,QAAQ,IAAZ;;AAEO,kBAAMC,oBAAoB,CAAC,MAAM;AACpC,uBAAO,MAAMA,iBAAN,CAAwB;AAC3BC,kCAAc;AACV,8BAAM,IAAIC,KAAJ,CAAU,+CAAV,CAAN;AACH;;AAED,2BAAOC,aAAP,GAAsB;AAClB,+BAAO,IAAIC,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;;AAEpC,gCAAIR,UAAJ,EAAgB,OAAOO,QAAQP,UAAR,CAAP;;AAEhB,kCAAMS,cAAcC,UAAUC,IAAV,CAAe,cAAf,EAA+B,CAA/B,CAApB;;AAEAF,wCAAYG,eAAZ,GAA8BC,KAAK;AAC/BX,kDAAkBY,aAAlB,CAAgCD,EAAEE,MAAF,CAASC,MAAzC;AACH,6BAFD;AAGAP,wCAAYQ,SAAZ,GAAwBJ,KAAK;AACzBb,6CAAaa,EAAEE,MAAF,CAASC,MAAtB;AACAf,wCAAQD,WAAWC,KAAX,CAAiBiB,IAAjB,CAAsBlB,UAAtB,CAAR;AACAA,2CAAWC,KAAX,GAAmB,MAAM;AACrB,0CAAM,IAAIG,KAAJ,CAAU,4CAAV,CAAN;AACH,iCAFD;AAGAG,wCAAQM,EAAEE,MAAF,CAASC,MAAjB;AACH,6BAPD;AAQAP,wCAAYU,OAAZ,GAAsBN,KAAK;AACvBO,wCAAQC,GAAR,CAAYR,EAAEE,MAAF,CAASO,KAArB;AACAd,uCAAOK,EAAEE,MAAF,CAASO,KAAT,CAAeC,IAAtB;AACH,6BAHD;AAIH,yBArBM,CAAP;AAsBH;AACD,2BAAOT,aAAP,CAAqBd,UAArB,EAAiC;AAC7BD,+BAAOyB,OAAP,CAAeC,SAAQ;AACnB,gCAAGzB,WAAW0B,gBAAX,CAA4BC,QAA5B,CAAqCF,KAArC,CAAH,EACIzB,WAAW4B,iBAAX,CAA6BH,KAA7B;;AAEJzB,uCAAW6B,iBAAX,CAA6BJ,KAA7B,EAAoC,EAACK,eAAe,IAAhB,EAApC;AACH,yBALD;AAMH;AACD,2BAAOC,eAAP,GAAyB;AACrB,4BAAG/B,UAAH,EAAe;AACXC;AACH;AACJ;AAzC0B,iBAA/B;AA2CH,aA5CgC,GAA1B","file":"ConnectionFactory.js","sourcesContent":["const stores = ['negociacoes'];\nlet connection = null;\nlet close = null;\n\nexport const ConnectionFactory = (() => {   \n    return class ConnectionFactory {\n        constructor() {\n            throw new Error('Não é possível criar instancias desta classe!');\n        }\n    \n        static getConnection(){\n            return new Promise((resolve, reject) => {\n                \n                if (connection) return resolve(connection);\n                \n                const openRequest = indexedDB.open('jscangaceiro', 2);\n                \n                openRequest.onupgradeneeded = e => {\n                    ConnectionFactory._createStores(e.target.result);\n                };\n                openRequest.onsuccess = e => {\n                    connection = e.target.result;\n                    close = connection.close.bind(connection);\n                    connection.close = () => {\n                        throw new Error('Voce não pode fechar diretamente a conexao');\n                    };\n                    resolve(e.target.result);\n                };\n                openRequest.onerror = e => {\n                    console.log(e.target.error);\n                    reject(e.target.error.name);\n                };\n            });\n        }\n        static _createStores(connection) {\n            stores.forEach(store =>{\n                if(connection.objectStoreNames.contains(store))\n                    connection.deleteObjectStore(store);\n                \n                connection.createObjectStore(store, {autoIncrement: true});\n            });\n        }\n        static closeConnection() {\n            if(connection) {\n                close();\n            }\n        }\n    }\n})();"]}